mutation CreateAccount($email: String!, $password: String!) {
    createAccount(data: { email: $email, password: $password }) {
        id
    }
}

mutation CreateCart {
    createCart(data: {}) {
        id
    }
}

mutation ConnectAccountWithCartAndPublish($accountId: ID!, $cartId: ID!) {
    updateAccount(where: { id: $accountId }, data: { cart: { connect: { id: $cartId } } }) {
        id
    }
    publishAccount(to: PUBLISHED, where: { id: $accountId }) {
        id
    }
    publishCart(to: PUBLISHED, where: { id: $cartId }) {
        id
    }
}

query GetAccountByEmail($email: String!) {
    account(where: { email: $email }, stage: DRAFT) {
        id
        email
        password
    }
}

query GetCartIdByAccountId($id: ID!) {
    account(where: { id: $id }) {
        cart {
            id
        }
    }
}

query GetProductsList {
    products(where: { option_some: { productTitle_not: "null" } }) {
        id
        slug
        name
        price
        images(first: 1) {
            url
            width
            height
            id
        }
        option {
            id
        }
    }
}

fragment cartContentQueryWithOption on Cart {
    id
    cartItems {
        id
        quantity
        option {
            id
            color
            size
            total
            product {
                id
                name
                price
                images {
                    url
                }
                slug
            }
        }
    }
}

query GetCartItemsByCartId($id: ID!) {
    cart(where: { id: $id }, stage: DRAFT) {
        ...cartContentQueryWithOption
    }
}

mutation AddItemOptionToCartByCartId($cartId: ID!, $quantity: Int!, $productOptionId: ID!) {
    updateCart(
        where: { id: $cartId }
        data: {
            cartItems: {
                create: { quantity: $quantity, option: { connect: { id: $productOptionId } } }
            }
        }
    ) {
        ...cartContentQueryWithOption
    }
}

mutation RemoveItemFromCartByCartId($cartId: ID!, $itemId: ID!) {
    updateCart(where: { id: $cartId }, data: { cartItems: { delete: { id: $itemId } } }) {
        ...cartContentQueryWithOption
    }
}

mutation UpdateItemQuantityByCartId($cartId: ID!, $itemId: ID!, $quantity: Int!) {
    updateCart(
        where: { id: $cartId }
        data: { cartItems: { update: { where: { id: $itemId }, data: { quantity: $quantity } } } }
    ) {
        ...cartContentQueryWithOption
    }
}

mutation ClearCartItems($cartId: ID!) {
    updateCart(where: { id: $cartId }, data: { cartItems: { set: [] } }) {
        ...cartContentQueryWithOption
    }
}

query GetProductsSlugs {
    products(where: { option_some: { productTitle_not: "null" } }) {
        slug
    }
}

query GetProductDetailsBySlug($slug: String) {
    product(where: { slug: $slug }) {
        id
        slug
        name
        price
        description
        images {
            url
        }
    }
}

query GetProductBySlug($slug: String) {
    product(where: { slug: $slug }) {
        id
        slug
        name
        price
        description
        images {
            url
        }
        option {
            total
            id
            color
            size
        }
    }
}

query GetProductOptions($id: ID) {
    option(where: { id: $id }) {
        id
        color
        size
    }
}

mutation CreateUnAuthCart {
    createUnauthCart(data: {}) {
        id
    }
}

fragment unAuthCartContent on UnauthCart {
    id
    cartItems
}

query GetUnauthCart($id: ID!) {
    unauthCart(where: { id: $id }, stage: DRAFT) {
        ...unAuthCartContent
    }
}

mutation UpdateUnauthCartById($id: ID!, $cartItems: Json!) {
    updateUnauthCart(where: { id: $id }, data: { cartItems: $cartItems }) {
        ...unAuthCartContent
    }
}

mutation DeleteUnauthCart($id: ID!) {
    deleteUnauthCart(where: { id: $id }) {
        id
    }
}

mutation CreateStripeCheckoutEndpointByCart(
    $cartId: ID!
    $stripeCheckoutId: String!
    $stripeCheckoutStatus: String!
    $stripePaymentIntent: String!
) {
    createStripeCheckout(
        data: {
            cart: { connect: { id: $cartId } }
            stripeCheckoutId: $stripeCheckoutId
            stripeCheckoutStatus: $stripeCheckoutStatus
            stripePaymentIntent: $stripePaymentIntent
        }
    ) {
        id
        stripeCheckoutId
        stripeCheckoutStatus
        stripePaymentIntent
        cart {
            id
        }
    }
}

query getUnpaidStripeCheckoutsByCartId($cartId: ID!) {
    cart(where: { id: $cartId }) {
        stripeCheckouts(where: { stripeCheckoutStatus_contains: "unpaid" }) {
            id
            stripeCheckoutId
            stripeCheckoutStatus
            stripePaymentIntent
        }
    }
}

mutation UpdateStripeCheckoutStatus($stripeCheckoutId: String!, $stripeCheckoutStatus: String!) {
    updateStripeCheckout(
        where: { stripeCheckoutId: $stripeCheckoutId }
        data: { stripeCheckoutStatus: $stripeCheckoutStatus }
    ) {
        id
        stripeCheckoutId
        stripeCheckoutStatus
        stripePaymentIntent
        cart {
            id
        }
    }
}
